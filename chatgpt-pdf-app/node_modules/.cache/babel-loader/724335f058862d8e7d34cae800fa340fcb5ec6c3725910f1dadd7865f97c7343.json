{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { readFileAsArrayBuffer } from '../../ReactFileUtilities';\n/**\n * In the context of resampling audio data, AudioContext is used to decode the input audio file into an AudioBuffer,\n * which is a fundamental data structure representing audio data.\n * @param file\n */\nexport var toAudioBuffer = function (file) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var audioCtx, arrayBuffer, decodedData;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          audioCtx = new AudioContext();\n          return [4 /*yield*/, readFileAsArrayBuffer(file)];\n        case 1:\n          arrayBuffer = _a.sent();\n          return [4 /*yield*/, audioCtx.decodeAudioData(arrayBuffer)];\n        case 2:\n          decodedData = _a.sent();\n          if (!(audioCtx.state !== 'closed')) return [3 /*break*/, 4];\n          return [4 /*yield*/, audioCtx.close()];\n        case 3:\n          _a.sent();\n          _a.label = 4;\n        case 4:\n          return [2 /*return*/, decodedData];\n      }\n    });\n  });\n};\n/**\n * OfflineAudioContext is a specialized type of AudioContext that does not render audio in real-time and is used for offline audio processing tasks.\n * It allows performing audio processing and rendering without actually playing the audio through speakers or outputting it to a destination.\n * In the context of resampling audio data, OfflineAudioContext is used to resample the decoded AudioBuffer from a file to the desired sample rate.\n * It provides more flexibility and control over audio processing, as it can operate at different sample rates and durations compared to real-time audio contexts.\n * @param audioBuffer\n * @param sampleRate\n */\nexport var renderAudio = function (audioBuffer, sampleRate) {\n  return __awaiter(void 0, void 0, void 0, function () {\n    var offlineAudioCtx, source;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          offlineAudioCtx = new OfflineAudioContext(audioBuffer.numberOfChannels, audioBuffer.duration * sampleRate, sampleRate);\n          source = offlineAudioCtx.createBufferSource();\n          source.buffer = audioBuffer;\n          source.connect(offlineAudioCtx.destination);\n          source.start();\n          return [4 /*yield*/, offlineAudioCtx.startRendering()];\n        case 1:\n          return [2 /*return*/, _a.sent()];\n      }\n    });\n  });\n};","map":{"version":3,"names":["__awaiter","__generator","readFileAsArrayBuffer","toAudioBuffer","file","audioCtx","arrayBuffer","decodedData","_a","label","AudioContext","sent","decodeAudioData","state","close","renderAudio","audioBuffer","sampleRate","offlineAudioCtx","source","OfflineAudioContext","numberOfChannels","duration","createBufferSource","buffer","connect","destination","start","startRendering"],"sources":["C:/Users/Aniket/Desktop/MS/NCSU/Subjects/Infinitus/chatgpt-pdf-app/node_modules/stream-chat-react/dist/components/MediaRecorder/transcode/audioProcessing.js"],"sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { readFileAsArrayBuffer } from '../../ReactFileUtilities';\n/**\n * In the context of resampling audio data, AudioContext is used to decode the input audio file into an AudioBuffer,\n * which is a fundamental data structure representing audio data.\n * @param file\n */\nexport var toAudioBuffer = function (file) { return __awaiter(void 0, void 0, void 0, function () {\n    var audioCtx, arrayBuffer, decodedData;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                audioCtx = new AudioContext();\n                return [4 /*yield*/, readFileAsArrayBuffer(file)];\n            case 1:\n                arrayBuffer = _a.sent();\n                return [4 /*yield*/, audioCtx.decodeAudioData(arrayBuffer)];\n            case 2:\n                decodedData = _a.sent();\n                if (!(audioCtx.state !== 'closed')) return [3 /*break*/, 4];\n                return [4 /*yield*/, audioCtx.close()];\n            case 3:\n                _a.sent();\n                _a.label = 4;\n            case 4: return [2 /*return*/, decodedData];\n        }\n    });\n}); };\n/**\n * OfflineAudioContext is a specialized type of AudioContext that does not render audio in real-time and is used for offline audio processing tasks.\n * It allows performing audio processing and rendering without actually playing the audio through speakers or outputting it to a destination.\n * In the context of resampling audio data, OfflineAudioContext is used to resample the decoded AudioBuffer from a file to the desired sample rate.\n * It provides more flexibility and control over audio processing, as it can operate at different sample rates and durations compared to real-time audio contexts.\n * @param audioBuffer\n * @param sampleRate\n */\nexport var renderAudio = function (audioBuffer, sampleRate) { return __awaiter(void 0, void 0, void 0, function () {\n    var offlineAudioCtx, source;\n    return __generator(this, function (_a) {\n        switch (_a.label) {\n            case 0:\n                offlineAudioCtx = new OfflineAudioContext(audioBuffer.numberOfChannels, audioBuffer.duration * sampleRate, sampleRate);\n                source = offlineAudioCtx.createBufferSource();\n                source.buffer = audioBuffer;\n                source.connect(offlineAudioCtx.destination);\n                source.start();\n                return [4 /*yield*/, offlineAudioCtx.startRendering()];\n            case 1: return [2 /*return*/, _a.sent()];\n        }\n    });\n}); };\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC9C,SAASC,qBAAqB,QAAQ,0BAA0B;AAChE;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIC,aAAa,GAAG,SAAAA,CAAUC,IAAI,EAAE;EAAE,OAAOJ,SAAS,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;IAC9F,IAAIK,QAAQ,EAAEC,WAAW,EAAEC,WAAW;IACtC,OAAON,WAAW,CAAC,IAAI,EAAE,UAAUO,EAAE,EAAE;MACnC,QAAQA,EAAE,CAACC,KAAK;QACZ,KAAK,CAAC;UACFJ,QAAQ,GAAG,IAAIK,YAAY,CAAC,CAAC;UAC7B,OAAO,CAAC,CAAC,CAAC,WAAWR,qBAAqB,CAACE,IAAI,CAAC,CAAC;QACrD,KAAK,CAAC;UACFE,WAAW,GAAGE,EAAE,CAACG,IAAI,CAAC,CAAC;UACvB,OAAO,CAAC,CAAC,CAAC,WAAWN,QAAQ,CAACO,eAAe,CAACN,WAAW,CAAC,CAAC;QAC/D,KAAK,CAAC;UACFC,WAAW,GAAGC,EAAE,CAACG,IAAI,CAAC,CAAC;UACvB,IAAI,EAAEN,QAAQ,CAACQ,KAAK,KAAK,QAAQ,CAAC,EAAE,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC;UAC3D,OAAO,CAAC,CAAC,CAAC,WAAWR,QAAQ,CAACS,KAAK,CAAC,CAAC,CAAC;QAC1C,KAAK,CAAC;UACFN,EAAE,CAACG,IAAI,CAAC,CAAC;UACTH,EAAE,CAACC,KAAK,GAAG,CAAC;QAChB,KAAK,CAAC;UAAE,OAAO,CAAC,CAAC,CAAC,YAAYF,WAAW,CAAC;MAC9C;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;AAAE,CAAC;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,IAAIQ,WAAW,GAAG,SAAAA,CAAUC,WAAW,EAAEC,UAAU,EAAE;EAAE,OAAOjB,SAAS,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;IAC/G,IAAIkB,eAAe,EAAEC,MAAM;IAC3B,OAAOlB,WAAW,CAAC,IAAI,EAAE,UAAUO,EAAE,EAAE;MACnC,QAAQA,EAAE,CAACC,KAAK;QACZ,KAAK,CAAC;UACFS,eAAe,GAAG,IAAIE,mBAAmB,CAACJ,WAAW,CAACK,gBAAgB,EAAEL,WAAW,CAACM,QAAQ,GAAGL,UAAU,EAAEA,UAAU,CAAC;UACtHE,MAAM,GAAGD,eAAe,CAACK,kBAAkB,CAAC,CAAC;UAC7CJ,MAAM,CAACK,MAAM,GAAGR,WAAW;UAC3BG,MAAM,CAACM,OAAO,CAACP,eAAe,CAACQ,WAAW,CAAC;UAC3CP,MAAM,CAACQ,KAAK,CAAC,CAAC;UACd,OAAO,CAAC,CAAC,CAAC,WAAWT,eAAe,CAACU,cAAc,CAAC,CAAC,CAAC;QAC1D,KAAK,CAAC;UAAE,OAAO,CAAC,CAAC,CAAC,YAAYpB,EAAE,CAACG,IAAI,CAAC,CAAC,CAAC;MAC5C;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;AAAE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}