{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aniket\\\\Desktop\\\\MS\\\\NCSU\\\\Subjects\\\\Infinitus\\\\chatgpt-pdf-app\\\\src\\\\components\\\\ChatApplication.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport PdfUploader from './PdfUploader';\nimport './ChatApplication.css'; // Ensure CSS for basic styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatApplication() {\n  _s();\n  const [sessionId, setSessionId] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (!sessionId) {\n      // Automatically fetch a new session when the component mounts\n      const getSession = async () => {\n        const response = await axios.get('http://localhost:5000/get_session');\n        setSessionId(response.data.session_id);\n      };\n      getSession();\n    }\n  }, [sessionId]);\n  const handleSendMessage = async event => {\n    event.preventDefault(); // Prevent default form submission behavior\n    if (inputMessage.trim()) {\n      setIsLoading(true);\n      setChatHistory([...chatHistory, {\n        role: 'user',\n        content: inputMessage\n      }]);\n      try {\n        const response = await axios.post('http://localhost:5000/ask_question', {\n          session_id: sessionId,\n          question: inputMessage\n        });\n        setChatHistory(currentHistory => [...currentHistory, {\n          role: 'assistant',\n          content: response.data.answer\n        }]);\n      } catch (error) {\n        console.error('Error sending message:', error);\n        setChatHistory(currentHistory => [...currentHistory, {\n          role: 'assistant',\n          content: \"Failed to get response.\"\n        }]);\n      }\n      setInputMessage(''); // Clear the input after sending\n      setIsLoading(false);\n    }\n  };\n  const handleKeyDown = event => {\n    if (event.key === 'Enter') {\n      handleSendMessage(event);\n    }\n  };\n  const clearChatHistory = () => {\n    setChatHistory([]); // Clear the chat history\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(PdfUploader, {\n      setSessionId: setSessionId,\n      onUploadSuccess: clearChatHistory\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-history\",\n      children: [chatHistory.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.role}`,\n        children: msg.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 21\n      }, this)), isLoading && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"message system\",\n        children: \"Generating Response...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      className: \"input-group\",\n      onSubmit: handleSendMessage,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: inputMessage,\n        onChange: e => setInputMessage(e.target.value),\n        onKeyDown: handleKeyDown,\n        placeholder: \"Type your message and press Enter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        className: \"send-button\",\n        children: \"\\u2B06 \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatApplication, \"LmZqxT6Gfqov04COicMr+mezRgM=\");\n_c = ChatApplication;\nexport default ChatApplication;\nvar _c;\n$RefreshReg$(_c, \"ChatApplication\");","map":{"version":3,"names":["React","useState","useEffect","axios","PdfUploader","jsxDEV","_jsxDEV","ChatApplication","_s","sessionId","setSessionId","chatHistory","setChatHistory","inputMessage","setInputMessage","isLoading","setIsLoading","getSession","response","get","data","session_id","handleSendMessage","event","preventDefault","trim","role","content","post","question","currentHistory","answer","error","console","handleKeyDown","key","clearChatHistory","className","children","onUploadSuccess","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","onSubmit","type","value","onChange","e","target","onKeyDown","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Aniket/Desktop/MS/NCSU/Subjects/Infinitus/chatgpt-pdf-app/src/components/ChatApplication.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport PdfUploader from './PdfUploader';\r\nimport './ChatApplication.css';  // Ensure CSS for basic styling\r\n\r\nfunction ChatApplication() {\r\n    const [sessionId, setSessionId] = useState('');\r\n    const [chatHistory, setChatHistory] = useState([]);\r\n    const [inputMessage, setInputMessage] = useState('');\r\n    const [isLoading, setIsLoading] = useState(false);\r\n\r\n    useEffect(() => {\r\n        if (!sessionId) {\r\n            // Automatically fetch a new session when the component mounts\r\n            const getSession = async () => {\r\n                const response = await axios.get('http://localhost:5000/get_session');\r\n                setSessionId(response.data.session_id);\r\n            };\r\n            getSession();\r\n        }\r\n    }, [sessionId]);\r\n\r\n    const handleSendMessage = async (event) => {\r\n        event.preventDefault(); // Prevent default form submission behavior\r\n        if (inputMessage.trim()) {\r\n            setIsLoading(true);\r\n            setChatHistory([...chatHistory, { role: 'user', content: inputMessage }]);\r\n            try {\r\n                const response = await axios.post('http://localhost:5000/ask_question', {\r\n                    session_id: sessionId,\r\n                    question: inputMessage,\r\n                });\r\n                setChatHistory(currentHistory => [...currentHistory, { role: 'assistant', content: response.data.answer }]);\r\n            } catch (error) {\r\n                console.error('Error sending message:', error);\r\n                setChatHistory(currentHistory => [...currentHistory, { role: 'assistant', content: \"Failed to get response.\" }]);\r\n            }\r\n            setInputMessage('');  // Clear the input after sending\r\n            setIsLoading(false);\r\n        }\r\n    };\r\n\r\n    const handleKeyDown = (event) => {\r\n        if (event.key === 'Enter') {\r\n            handleSendMessage(event);\r\n        }\r\n    };\r\n\r\n    const clearChatHistory = () => {\r\n        setChatHistory([]);  // Clear the chat history\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <PdfUploader setSessionId={setSessionId} onUploadSuccess={clearChatHistory} />\r\n            <div className=\"chat-history\">\r\n                {chatHistory.map((msg, index) => (\r\n                    <div key={index} className={`message ${msg.role}`}>\r\n                        {msg.content}\r\n                    </div>\r\n                ))}\r\n                {isLoading && <div className=\"message system\">Generating Response...</div>}\r\n            </div>\r\n            <form className=\"input-group\" onSubmit={handleSendMessage}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputMessage}\r\n                    onChange={(e) => setInputMessage(e.target.value)}\r\n                    onKeyDown={handleKeyDown}\r\n                    placeholder=\"Type your message and press Enter\"\r\n                />\r\n                <button type=\"submit\" className=\"send-button\">\r\n                    &#x2B06; {/* Unicode character for upward arrow */}\r\n                </button>\r\n            </form>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatApplication;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}