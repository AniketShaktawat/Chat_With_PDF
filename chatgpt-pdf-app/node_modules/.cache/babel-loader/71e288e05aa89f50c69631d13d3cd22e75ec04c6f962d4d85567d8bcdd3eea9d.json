{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aniket\\\\Desktop\\\\MS\\\\NCSU\\\\Subjects\\\\Infinitus\\\\chatgpt-pdf-app\\\\src\\\\components\\\\ChatApplication.js\",\n  _s = $RefreshSig$();\n// src/components/ChatApplication.js\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport PdfUploader from './PdfUploader';\nimport './ChatApplication.css'; // Ensure CSS for basic styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatApplication() {\n  _s();\n  const [sessionId, setSessionId] = useState('');\n  const [chatHistory, setChatHistory] = useState([]);\n  const [inputMessage, setInputMessage] = useState('');\n  useEffect(() => {\n    if (!sessionId) {\n      // Automatically fetch a new session when the component mounts\n      const getSession = async () => {\n        const response = await axios.get('http://localhost:5000/get_session');\n        setSessionId(response.data.session_id);\n      };\n      getSession();\n    }\n  }, [sessionId]);\n  const handleSendMessage = async event => {\n    if (event.key === 'Enter' && inputMessage.trim()) {\n      try {\n        const response = await axios.post('http://localhost:5000/ask_question', {\n          session_id: sessionId,\n          question: inputMessage\n        });\n        setChatHistory([...chatHistory, {\n          role: 'user',\n          content: inputMessage\n        }, {\n          role: 'assistant',\n          content: response.data.answer\n        }]);\n        setInputMessage(''); // Clear the input after sending\n      } catch (error) {\n        console.error('Error sending message:', error);\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(PdfUploader, {\n      setSessionId: setSessionId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-history\",\n      children: chatHistory.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.role}`,\n        children: msg.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      value: inputMessage,\n      onChange: e => setInputMessage(e.target.value),\n      onKeyDown: handleSendMessage,\n      placeholder: \"Type your message and press Enter\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatApplication, \"P/XFb6TJlUo3GGd/YNzb9+2YBIQ=\");\n_c = ChatApplication;\nexport default ChatApplication;\nvar _c;\n$RefreshReg$(_c, \"ChatApplication\");","map":{"version":3,"names":["React","useState","useEffect","axios","PdfUploader","jsxDEV","_jsxDEV","ChatApplication","_s","sessionId","setSessionId","chatHistory","setChatHistory","inputMessage","setInputMessage","getSession","response","get","data","session_id","handleSendMessage","event","key","trim","post","question","role","content","answer","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","map","msg","index","type","value","onChange","e","target","onKeyDown","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/Aniket/Desktop/MS/NCSU/Subjects/Infinitus/chatgpt-pdf-app/src/components/ChatApplication.js"],"sourcesContent":["// src/components/ChatApplication.js\r\nimport React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport PdfUploader from './PdfUploader';\r\nimport './ChatApplication.css';  // Ensure CSS for basic styling\r\n\r\nfunction ChatApplication() {\r\n    const [sessionId, setSessionId] = useState('');\r\n    const [chatHistory, setChatHistory] = useState([]);\r\n    const [inputMessage, setInputMessage] = useState('');\r\n\r\n    useEffect(() => {\r\n        if (!sessionId) {\r\n            // Automatically fetch a new session when the component mounts\r\n            const getSession = async () => {\r\n                const response = await axios.get('http://localhost:5000/get_session');\r\n                setSessionId(response.data.session_id);\r\n            };\r\n            getSession();\r\n        }\r\n    }, [sessionId]);\r\n\r\n    const handleSendMessage = async (event) => {\r\n        if (event.key === 'Enter' && inputMessage.trim()) {\r\n            try {\r\n                const response = await axios.post('http://localhost:5000/ask_question', {\r\n                    session_id: sessionId,\r\n                    question: inputMessage,\r\n                });\r\n                setChatHistory([...chatHistory, { role: 'user', content: inputMessage }, { role: 'assistant', content: response.data.answer }]);\r\n                setInputMessage('');  // Clear the input after sending\r\n            } catch (error) {\r\n                console.error('Error sending message:', error);\r\n            }\r\n        }\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <PdfUploader setSessionId={setSessionId} />\r\n            <div className=\"chat-history\">\r\n                {chatHistory.map((msg, index) => (\r\n                    <div key={index} className={`message ${msg.role}`}>\r\n                        {msg.content}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <input\r\n                type=\"text\"\r\n                value={inputMessage}\r\n                onChange={(e) => setInputMessage(e.target.value)}\r\n                onKeyDown={handleSendMessage}\r\n                placeholder=\"Type your message and press Enter\"\r\n            />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatApplication;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}