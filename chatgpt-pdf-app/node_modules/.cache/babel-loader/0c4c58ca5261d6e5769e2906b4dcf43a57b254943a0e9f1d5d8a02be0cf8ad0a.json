{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aniket\\\\Desktop\\\\MS\\\\NCSU\\\\Subjects\\\\Infinitus\\\\chatgpt-pdf-app\\\\src\\\\components\\\\ChatApplication.js\";\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { StreamChat } from 'stream-chat';\nimport { Chat, Channel, ChannelList, ChannelHeader, MessageList, MessageInput, Window, Thread, ChannelListMessenger, ChannelPreviewMessenger, MessageInputFlat, MessageSimple, TypingIndicator } from 'stream-chat-react';\nimport 'stream-chat-react/dist/css/index.css'; // Import Stream Chat CSS\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst chatClient = new StreamChat('qk4nn7rpcn75');\nconst userToken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiYnJva2VuLXdhdGVyZmFsbC01In0.d1xKTlD_D0G-VsBoDBNbaLjO-2XWNA8rlTm4ru4sMHg';\nchatClient.connectUser({\n  id: 'broken-waterfall-5',\n  name: 'Broken waterfall',\n  image: 'https://getstream.io/random_svg/?id=broken-waterfall-5&amp;name=Broken+waterfall'\n}, userToken);\nconst filters = {\n  type: 'messaging',\n  example: 1\n};\nconst sort = {\n  last_message_at: -1\n};\nclass ChatApplication extends React.Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(Chat, {\n      client: chatClient,\n      theme: \"messaging light\",\n      children: [/*#__PURE__*/_jsxDEV(ChannelList, {\n        filters: filters,\n        sort: sort,\n        List: ChannelListMessenger,\n        Preview: ChannelPreviewMessenger\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Channel, {\n        children: [/*#__PURE__*/_jsxDEV(Window, {\n          children: [/*#__PURE__*/_jsxDEV(ChannelHeader, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MessageList, {\n            TypingIndicator: TypingIndicator\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 50,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n            Input: MessageInputFlat,\n            focus: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Thread, {\n          Message: MessageSimple\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 53,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this);\n  }\n}\nexport default ChatApplication;\n\n// To use the ChatApplication component, render it in your main App component or wherever needed\nReactDOM.render( /*#__PURE__*/_jsxDEV(ChatApplication, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 63,\n  columnNumber: 17\n}, this), document.getElementById('root'));","map":{"version":3,"names":["React","ReactDOM","StreamChat","Chat","Channel","ChannelList","ChannelHeader","MessageList","MessageInput","Window","Thread","ChannelListMessenger","ChannelPreviewMessenger","MessageInputFlat","MessageSimple","TypingIndicator","jsxDEV","_jsxDEV","chatClient","userToken","connectUser","id","name","image","filters","type","example","sort","last_message_at","ChatApplication","Component","render","client","theme","children","List","Preview","fileName","_jsxFileName","lineNumber","columnNumber","Input","focus","Message","document","getElementById"],"sources":["C:/Users/Aniket/Desktop/MS/NCSU/Subjects/Infinitus/chatgpt-pdf-app/src/components/ChatApplication.js"],"sourcesContent":["import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { StreamChat } from 'stream-chat';\r\nimport {\r\n  Chat,\r\n  Channel,\r\n  ChannelList,\r\n  ChannelHeader,\r\n  MessageList,\r\n  MessageInput,\r\n  Window,\r\n  Thread,\r\n  ChannelListMessenger,\r\n  ChannelPreviewMessenger,\r\n  MessageInputFlat,\r\n  MessageSimple,\r\n  TypingIndicator\r\n} from 'stream-chat-react';\r\nimport 'stream-chat-react/dist/css/index.css'; // Import Stream Chat CSS\r\n\r\nconst chatClient = new StreamChat('qk4nn7rpcn75');\r\n\r\nconst userToken = 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VyX2lkIjoiYnJva2VuLXdhdGVyZmFsbC01In0.d1xKTlD_D0G-VsBoDBNbaLjO-2XWNA8rlTm4ru4sMHg';\r\n\r\nchatClient.connectUser(\r\n  {\r\n    id: 'broken-waterfall-5',\r\n    name: 'Broken waterfall',\r\n    image: 'https://getstream.io/random_svg/?id=broken-waterfall-5&amp;name=Broken+waterfall'\r\n  },\r\n  userToken\r\n);\r\n\r\nconst filters = { type: 'messaging', example: 1 };\r\nconst sort = { last_message_at: -1 };\r\n\r\nclass ChatApplication extends React.Component {\r\n  render() {\r\n    return (\r\n      <Chat client={chatClient} theme=\"messaging light\">\r\n        <ChannelList\r\n          filters={filters}\r\n          sort={sort}\r\n          List={ChannelListMessenger}\r\n          Preview={ChannelPreviewMessenger}\r\n        />\r\n        <Channel>\r\n          <Window>\r\n            <ChannelHeader />\r\n            <MessageList TypingIndicator={TypingIndicator} />\r\n            <MessageInput Input={MessageInputFlat} focus />\r\n          </Window>\r\n          <Thread Message={MessageSimple} />\r\n        </Channel>\r\n      </Chat>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ChatApplication;\r\n\r\n// To use the ChatApplication component, render it in your main App component or wherever needed\r\nReactDOM.render(<ChatApplication />, document.getElementById('root'));\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,WAAW;AAChC,SAASC,UAAU,QAAQ,aAAa;AACxC,SACEC,IAAI,EACJC,OAAO,EACPC,WAAW,EACXC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,MAAM,EACNC,MAAM,EACNC,oBAAoB,EACpBC,uBAAuB,EACvBC,gBAAgB,EAChBC,aAAa,EACbC,eAAe,QACV,mBAAmB;AAC1B,OAAO,sCAAsC,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE/C,MAAMC,UAAU,GAAG,IAAIhB,UAAU,CAAC,cAAc,CAAC;AAEjD,MAAMiB,SAAS,GAAG,8HAA8H;AAEhJD,UAAU,CAACE,WAAW,CACpB;EACEC,EAAE,EAAE,oBAAoB;EACxBC,IAAI,EAAE,kBAAkB;EACxBC,KAAK,EAAE;AACT,CAAC,EACDJ,SACF,CAAC;AAED,MAAMK,OAAO,GAAG;EAAEC,IAAI,EAAE,WAAW;EAAEC,OAAO,EAAE;AAAE,CAAC;AACjD,MAAMC,IAAI,GAAG;EAAEC,eAAe,EAAE,CAAC;AAAE,CAAC;AAEpC,MAAMC,eAAe,SAAS7B,KAAK,CAAC8B,SAAS,CAAC;EAC5CC,MAAMA,CAAA,EAAG;IACP,oBACEd,OAAA,CAACd,IAAI;MAAC6B,MAAM,EAAEd,UAAW;MAACe,KAAK,EAAC,iBAAiB;MAAAC,QAAA,gBAC/CjB,OAAA,CAACZ,WAAW;QACVmB,OAAO,EAAEA,OAAQ;QACjBG,IAAI,EAAEA,IAAK;QACXQ,IAAI,EAAExB,oBAAqB;QAC3ByB,OAAO,EAAExB;MAAwB;QAAAyB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAClC,CAAC,eACFvB,OAAA,CAACb,OAAO;QAAA8B,QAAA,gBACNjB,OAAA,CAACR,MAAM;UAAAyB,QAAA,gBACLjB,OAAA,CAACX,aAAa;YAAA+B,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACjBvB,OAAA,CAACV,WAAW;YAACQ,eAAe,EAAEA;UAAgB;YAAAsB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,eACjDvB,OAAA,CAACT,YAAY;YAACiC,KAAK,EAAE5B,gBAAiB;YAAC6B,KAAK;UAAA;YAAAL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACzC,CAAC,eACTvB,OAAA,CAACP,MAAM;UAACiC,OAAO,EAAE7B;QAAc;UAAAuB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC3B,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACN,CAAC;EAEX;AACF;AAEA,eAAeX,eAAe;;AAE9B;AACA5B,QAAQ,CAAC8B,MAAM,eAACd,OAAA,CAACY,eAAe;EAAAQ,QAAA,EAAAC,YAAA;EAAAC,UAAA;EAAAC,YAAA;AAAA,OAAE,CAAC,EAAEI,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}