{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Aniket\\\\Desktop\\\\MS\\\\NCSU\\\\Subjects\\\\Infinitus\\\\chatgpt-pdf-app\\\\src\\\\components\\\\ChatApplication.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport QuestionAsker from './QuestionAsker';\nimport './ChatApplication.css'; // Ensure this CSS file is in the correct location and imported\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatApplication() {\n  _s();\n  const [sessionId, setSessionId] = useState('');\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    // Fetch the session ID when the component mounts\n    const fetchSession = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/get_session');\n        setSessionId(response.data.session_id);\n      } catch (error) {\n        console.error(\"Failed to fetch session ID:\", error);\n      }\n    };\n    fetchSession();\n  }, []);\n  const addMessage = (role, content) => {\n    // Function to add messages to chat history\n    const newMessage = {\n      role,\n      content\n    };\n    setMessages(prevMessages => [...prevMessages, newMessage]);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"chat-history\",\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `message ${msg.role}`,\n        children: msg.content\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 21\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(QuestionAsker, {\n      sessionId: sessionId,\n      addMessage: addMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 30,\n    columnNumber: 9\n  }, this);\n}\n_s(ChatApplication, \"uF349KxTO0C4zn6MIHDTYSSEoQk=\");\n_c = ChatApplication;\nexport default ChatApplication;\nvar _c;\n$RefreshReg$(_c, \"ChatApplication\");","map":{"version":3,"names":["React","useState","useEffect","axios","QuestionAsker","jsxDEV","_jsxDEV","ChatApplication","_s","sessionId","setSessionId","messages","setMessages","fetchSession","response","get","data","session_id","error","console","addMessage","role","content","newMessage","prevMessages","className","children","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Aniket/Desktop/MS/NCSU/Subjects/Infinitus/chatgpt-pdf-app/src/components/ChatApplication.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport QuestionAsker from './QuestionAsker';\r\nimport './ChatApplication.css';  // Ensure this CSS file is in the correct location and imported\r\n\r\nfunction ChatApplication() {\r\n    const [sessionId, setSessionId] = useState('');\r\n    const [messages, setMessages] = useState([]);\r\n\r\n    useEffect(() => {\r\n        // Fetch the session ID when the component mounts\r\n        const fetchSession = async () => {\r\n            try {\r\n                const response = await axios.get('http://localhost:5000/get_session');\r\n                setSessionId(response.data.session_id);\r\n            } catch (error) {\r\n                console.error(\"Failed to fetch session ID:\", error);\r\n            }\r\n        };\r\n        fetchSession();\r\n    }, []);\r\n\r\n    const addMessage = (role, content) => {\r\n        // Function to add messages to chat history\r\n        const newMessage = { role, content };\r\n        setMessages(prevMessages => [...prevMessages, newMessage]);\r\n    };\r\n\r\n    return (\r\n        <div className=\"chat-container\">\r\n            <div className=\"chat-history\">\r\n                {messages.map((msg, index) => (\r\n                    <div key={index} className={`message ${msg.role}`}>\r\n                        {msg.content}\r\n                    </div>\r\n                ))}\r\n            </div>\r\n            <QuestionAsker sessionId={sessionId} addMessage={addMessage} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ChatApplication;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,aAAa,MAAM,iBAAiB;AAC3C,OAAO,uBAAuB,CAAC,CAAE;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEjC,SAASC,eAAeA,CAAA,EAAG;EAAAC,EAAA;EACvB,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC9C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACZ;IACA,MAAMW,YAAY,GAAG,MAAAA,CAAA,KAAY;MAC7B,IAAI;QACA,MAAMC,QAAQ,GAAG,MAAMX,KAAK,CAACY,GAAG,CAAC,mCAAmC,CAAC;QACrEL,YAAY,CAACI,QAAQ,CAACE,IAAI,CAACC,UAAU,CAAC;MAC1C,CAAC,CAAC,OAAOC,KAAK,EAAE;QACZC,OAAO,CAACD,KAAK,CAAC,6BAA6B,EAAEA,KAAK,CAAC;MACvD;IACJ,CAAC;IACDL,YAAY,CAAC,CAAC;EAClB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMO,UAAU,GAAGA,CAACC,IAAI,EAAEC,OAAO,KAAK;IAClC;IACA,MAAMC,UAAU,GAAG;MAAEF,IAAI;MAAEC;IAAQ,CAAC;IACpCV,WAAW,CAACY,YAAY,IAAI,CAAC,GAAGA,YAAY,EAAED,UAAU,CAAC,CAAC;EAC9D,CAAC;EAED,oBACIjB,OAAA;IAAKmB,SAAS,EAAC,gBAAgB;IAAAC,QAAA,gBAC3BpB,OAAA;MAAKmB,SAAS,EAAC,cAAc;MAAAC,QAAA,EACxBf,QAAQ,CAACgB,GAAG,CAAC,CAACC,GAAG,EAAEC,KAAK,kBACrBvB,OAAA;QAAiBmB,SAAS,EAAG,WAAUG,GAAG,CAACP,IAAK,EAAE;QAAAK,QAAA,EAC7CE,GAAG,CAACN;MAAO,GADNO,KAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEV,CACR;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACD,CAAC,eACN3B,OAAA,CAACF,aAAa;MAACK,SAAS,EAAEA,SAAU;MAACW,UAAU,EAAEA;IAAW;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC9D,CAAC;AAEd;AAACzB,EAAA,CAnCQD,eAAe;AAAA2B,EAAA,GAAf3B,eAAe;AAqCxB,eAAeA,eAAe;AAAC,IAAA2B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}