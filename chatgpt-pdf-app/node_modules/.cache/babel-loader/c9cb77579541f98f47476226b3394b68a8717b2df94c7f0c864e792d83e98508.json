{"ast":null,"code":"import { __awaiter, __generator } from \"tslib\";\nimport { Mp3Encoder } from '@breezystack/lamejs';\nimport { renderAudio, toAudioBuffer } from './audioProcessing';\nvar ENCODING_BIT_RATE = 128; // kbps;\nvar COUNT_SAMPLES_PER_ENCODED_BLOCK = 1152;\nvar float32ArrayToInt16Array = function (float32Arr) {\n  var int16Arr = new Int16Array(float32Arr.length);\n  for (var i = 0; i < float32Arr.length; i++) {\n    var float32Value = float32Arr[i];\n    // Clamp the float value between -1 and 1\n    var clampedValue = Math.max(-1, Math.min(1, float32Value));\n    // Convert the float value to a signed 16-bit integer\n    int16Arr[i] = Math.round(clampedValue * 32767);\n  }\n  return int16Arr;\n};\nvar splitDataByChannel = function (audioBuffer) {\n  return Array.from({\n    length: audioBuffer.numberOfChannels\n  }, function (_, i) {\n    return audioBuffer.getChannelData(i);\n  }).map(float32ArrayToInt16Array);\n};\nexport function encodeToMp3(file, sampleRate) {\n  return __awaiter(this, void 0, void 0, function () {\n    var audioBuffer, _a, channelCount, dataByChannel, mp3Encoder, dataBuffer, remaining, _loop_1, i, lastBlock;\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          _a = renderAudio;\n          return [4 /*yield*/, toAudioBuffer(file)];\n        case 1:\n          return [4 /*yield*/, _a.apply(void 0, [_b.sent(), sampleRate])];\n        case 2:\n          audioBuffer = _b.sent();\n          channelCount = audioBuffer.numberOfChannels;\n          dataByChannel = splitDataByChannel(audioBuffer);\n          mp3Encoder = new Mp3Encoder(channelCount, sampleRate, ENCODING_BIT_RATE);\n          dataBuffer = [];\n          remaining = dataByChannel[0].length;\n          _loop_1 = function (i) {\n            var _c = dataByChannel.map(function (channel) {\n                return channel.subarray(i, i + COUNT_SAMPLES_PER_ENCODED_BLOCK);\n              }),\n              leftChannelBlock = _c[0],\n              rightChannelBlock = _c[1];\n            dataBuffer.push(new Int8Array(mp3Encoder.encodeBuffer(leftChannelBlock, rightChannelBlock)));\n            remaining -= COUNT_SAMPLES_PER_ENCODED_BLOCK;\n          };\n          for (i = 0; remaining >= COUNT_SAMPLES_PER_ENCODED_BLOCK; i += COUNT_SAMPLES_PER_ENCODED_BLOCK) {\n            _loop_1(i);\n          }\n          lastBlock = mp3Encoder.flush();\n          if (lastBlock.length) dataBuffer.push(new Int8Array(lastBlock));\n          return [2 /*return*/, new Blob(dataBuffer, {\n            type: 'audio/mp3;sbu_type=voice'\n          })];\n      }\n    });\n  });\n}","map":{"version":3,"names":["__awaiter","__generator","Mp3Encoder","renderAudio","toAudioBuffer","ENCODING_BIT_RATE","COUNT_SAMPLES_PER_ENCODED_BLOCK","float32ArrayToInt16Array","float32Arr","int16Arr","Int16Array","length","i","float32Value","clampedValue","Math","max","min","round","splitDataByChannel","audioBuffer","Array","from","numberOfChannels","_","getChannelData","map","encodeToMp3","file","sampleRate","_a","channelCount","dataByChannel","mp3Encoder","dataBuffer","remaining","_loop_1","lastBlock","_b","label","apply","sent","_c","channel","subarray","leftChannelBlock","rightChannelBlock","push","Int8Array","encodeBuffer","flush","Blob","type"],"sources":["C:/Users/Aniket/Desktop/MS/NCSU/Subjects/Infinitus/chatgpt-pdf-app/node_modules/stream-chat-react/dist/components/MediaRecorder/transcode/mp3.js"],"sourcesContent":["import { __awaiter, __generator } from \"tslib\";\nimport { Mp3Encoder } from '@breezystack/lamejs';\nimport { renderAudio, toAudioBuffer } from './audioProcessing';\nvar ENCODING_BIT_RATE = 128; // kbps;\nvar COUNT_SAMPLES_PER_ENCODED_BLOCK = 1152;\nvar float32ArrayToInt16Array = function (float32Arr) {\n    var int16Arr = new Int16Array(float32Arr.length);\n    for (var i = 0; i < float32Arr.length; i++) {\n        var float32Value = float32Arr[i];\n        // Clamp the float value between -1 and 1\n        var clampedValue = Math.max(-1, Math.min(1, float32Value));\n        // Convert the float value to a signed 16-bit integer\n        int16Arr[i] = Math.round(clampedValue * 32767);\n    }\n    return int16Arr;\n};\nvar splitDataByChannel = function (audioBuffer) {\n    return Array.from({ length: audioBuffer.numberOfChannels }, function (_, i) { return audioBuffer.getChannelData(i); }).map(float32ArrayToInt16Array);\n};\nexport function encodeToMp3(file, sampleRate) {\n    return __awaiter(this, void 0, void 0, function () {\n        var audioBuffer, _a, channelCount, dataByChannel, mp3Encoder, dataBuffer, remaining, _loop_1, i, lastBlock;\n        return __generator(this, function (_b) {\n            switch (_b.label) {\n                case 0:\n                    _a = renderAudio;\n                    return [4 /*yield*/, toAudioBuffer(file)];\n                case 1: return [4 /*yield*/, _a.apply(void 0, [_b.sent(), sampleRate])];\n                case 2:\n                    audioBuffer = _b.sent();\n                    channelCount = audioBuffer.numberOfChannels;\n                    dataByChannel = splitDataByChannel(audioBuffer);\n                    mp3Encoder = new Mp3Encoder(channelCount, sampleRate, ENCODING_BIT_RATE);\n                    dataBuffer = [];\n                    remaining = dataByChannel[0].length;\n                    _loop_1 = function (i) {\n                        var _c = dataByChannel.map(function (channel) {\n                            return channel.subarray(i, i + COUNT_SAMPLES_PER_ENCODED_BLOCK);\n                        }), leftChannelBlock = _c[0], rightChannelBlock = _c[1];\n                        dataBuffer.push(new Int8Array(mp3Encoder.encodeBuffer(leftChannelBlock, rightChannelBlock)));\n                        remaining -= COUNT_SAMPLES_PER_ENCODED_BLOCK;\n                    };\n                    for (i = 0; remaining >= COUNT_SAMPLES_PER_ENCODED_BLOCK; i += COUNT_SAMPLES_PER_ENCODED_BLOCK) {\n                        _loop_1(i);\n                    }\n                    lastBlock = mp3Encoder.flush();\n                    if (lastBlock.length)\n                        dataBuffer.push(new Int8Array(lastBlock));\n                    return [2 /*return*/, new Blob(dataBuffer, { type: 'audio/mp3;sbu_type=voice' })];\n            }\n        });\n    });\n}\n"],"mappings":"AAAA,SAASA,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC9C,SAASC,UAAU,QAAQ,qBAAqB;AAChD,SAASC,WAAW,EAAEC,aAAa,QAAQ,mBAAmB;AAC9D,IAAIC,iBAAiB,GAAG,GAAG,CAAC,CAAC;AAC7B,IAAIC,+BAA+B,GAAG,IAAI;AAC1C,IAAIC,wBAAwB,GAAG,SAAAA,CAAUC,UAAU,EAAE;EACjD,IAAIC,QAAQ,GAAG,IAAIC,UAAU,CAACF,UAAU,CAACG,MAAM,CAAC;EAChD,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,UAAU,CAACG,MAAM,EAAEC,CAAC,EAAE,EAAE;IACxC,IAAIC,YAAY,GAAGL,UAAU,CAACI,CAAC,CAAC;IAChC;IACA,IAAIE,YAAY,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAAC,EAAED,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEJ,YAAY,CAAC,CAAC;IAC1D;IACAJ,QAAQ,CAACG,CAAC,CAAC,GAAGG,IAAI,CAACG,KAAK,CAACJ,YAAY,GAAG,KAAK,CAAC;EAClD;EACA,OAAOL,QAAQ;AACnB,CAAC;AACD,IAAIU,kBAAkB,GAAG,SAAAA,CAAUC,WAAW,EAAE;EAC5C,OAAOC,KAAK,CAACC,IAAI,CAAC;IAAEX,MAAM,EAAES,WAAW,CAACG;EAAiB,CAAC,EAAE,UAAUC,CAAC,EAAEZ,CAAC,EAAE;IAAE,OAAOQ,WAAW,CAACK,cAAc,CAACb,CAAC,CAAC;EAAE,CAAC,CAAC,CAACc,GAAG,CAACnB,wBAAwB,CAAC;AACxJ,CAAC;AACD,OAAO,SAASoB,WAAWA,CAACC,IAAI,EAAEC,UAAU,EAAE;EAC1C,OAAO7B,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,EAAE,KAAK,CAAC,EAAE,YAAY;IAC/C,IAAIoB,WAAW,EAAEU,EAAE,EAAEC,YAAY,EAAEC,aAAa,EAAEC,UAAU,EAAEC,UAAU,EAAEC,SAAS,EAAEC,OAAO,EAAExB,CAAC,EAAEyB,SAAS;IAC1G,OAAOpC,WAAW,CAAC,IAAI,EAAE,UAAUqC,EAAE,EAAE;MACnC,QAAQA,EAAE,CAACC,KAAK;QACZ,KAAK,CAAC;UACFT,EAAE,GAAG3B,WAAW;UAChB,OAAO,CAAC,CAAC,CAAC,WAAWC,aAAa,CAACwB,IAAI,CAAC,CAAC;QAC7C,KAAK,CAAC;UAAE,OAAO,CAAC,CAAC,CAAC,WAAWE,EAAE,CAACU,KAAK,CAAC,KAAK,CAAC,EAAE,CAACF,EAAE,CAACG,IAAI,CAAC,CAAC,EAAEZ,UAAU,CAAC,CAAC,CAAC;QACvE,KAAK,CAAC;UACFT,WAAW,GAAGkB,EAAE,CAACG,IAAI,CAAC,CAAC;UACvBV,YAAY,GAAGX,WAAW,CAACG,gBAAgB;UAC3CS,aAAa,GAAGb,kBAAkB,CAACC,WAAW,CAAC;UAC/Ca,UAAU,GAAG,IAAI/B,UAAU,CAAC6B,YAAY,EAAEF,UAAU,EAAExB,iBAAiB,CAAC;UACxE6B,UAAU,GAAG,EAAE;UACfC,SAAS,GAAGH,aAAa,CAAC,CAAC,CAAC,CAACrB,MAAM;UACnCyB,OAAO,GAAG,SAAAA,CAAUxB,CAAC,EAAE;YACnB,IAAI8B,EAAE,GAAGV,aAAa,CAACN,GAAG,CAAC,UAAUiB,OAAO,EAAE;gBAC1C,OAAOA,OAAO,CAACC,QAAQ,CAAChC,CAAC,EAAEA,CAAC,GAAGN,+BAA+B,CAAC;cACnE,CAAC,CAAC;cAAEuC,gBAAgB,GAAGH,EAAE,CAAC,CAAC,CAAC;cAAEI,iBAAiB,GAAGJ,EAAE,CAAC,CAAC,CAAC;YACvDR,UAAU,CAACa,IAAI,CAAC,IAAIC,SAAS,CAACf,UAAU,CAACgB,YAAY,CAACJ,gBAAgB,EAAEC,iBAAiB,CAAC,CAAC,CAAC;YAC5FX,SAAS,IAAI7B,+BAA+B;UAChD,CAAC;UACD,KAAKM,CAAC,GAAG,CAAC,EAAEuB,SAAS,IAAI7B,+BAA+B,EAAEM,CAAC,IAAIN,+BAA+B,EAAE;YAC5F8B,OAAO,CAACxB,CAAC,CAAC;UACd;UACAyB,SAAS,GAAGJ,UAAU,CAACiB,KAAK,CAAC,CAAC;UAC9B,IAAIb,SAAS,CAAC1B,MAAM,EAChBuB,UAAU,CAACa,IAAI,CAAC,IAAIC,SAAS,CAACX,SAAS,CAAC,CAAC;UAC7C,OAAO,CAAC,CAAC,CAAC,YAAY,IAAIc,IAAI,CAACjB,UAAU,EAAE;YAAEkB,IAAI,EAAE;UAA2B,CAAC,CAAC,CAAC;MACzF;IACJ,CAAC,CAAC;EACN,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}